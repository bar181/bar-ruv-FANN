Solve the following network optimization problem:

You have a network of cities connected by roads with travel times:
- Cities: A, B, C, D, E
- Connections (bidirectional with travel time in minutes):
  A-B: 10, A-C: 15, B-C: 5, B-D: 20, C-D: 10, C-E: 25, D-E: 15

Tasks:
1. Find the shortest path from A to E
2. Prove your path is optimal
3. Implement Dijkstra's algorithm in Python that:
   - Works with any graph represented as adjacency list
   - Returns both shortest distance and path
   - Handles disconnected graphs gracefully
4. Calculate the time complexity
5. Modify to find all paths within 10% of optimal

Example graph format:
graph = {
    'A': {'B': 10, 'C': 15},
    'B': {'A': 10, 'C': 5, 'D': 20},
    ...
}