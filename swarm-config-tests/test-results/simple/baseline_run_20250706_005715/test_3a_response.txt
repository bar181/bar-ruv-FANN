## Solution: Fence Optimization Problem

### 1. Mathematical Setup

Let's define:
- `w` = width of the rectangle (perpendicular to the wall)
- `l` = length of the rectangle (parallel to the wall)

Since one side is against the wall, we only need fencing for 3 sides:
- Constraint: `2w + l = 100` (total fence length)
- Objective: Maximize area `A = w × l`

### 2. Finding Optimal Dimensions

From the constraint: `l = 100 - 2w`

Substituting into the area formula:
`A(w) = w × (100 - 2w) = 100w - 2w²`

To find the maximum, take the derivative and set it to zero:
`dA/dw = 100 - 4w = 0`
`w = 25 meters`

Therefore: `l = 100 - 2(25) = 50 meters`

Maximum area: `A = 25 × 50 = 1250 square meters`

### 3. Proof of Optimality

Second derivative test:
`d²A/dw² = -4 < 0`

Since the second derivative is negative, we have a maximum at `w = 25`.

### 4. Python Implementation

```python
import matplotlib.pyplot as plt
import numpy as np

def maximize_enclosure(fence_length):
    """
    Calculate optimal dimensions for a rectangular enclosure against a wall.
    
    Args:
        fence_length: Total length of fencing available (positive number)
    
    Returns:
        tuple: (width, length, area) - optimal dimensions and maximum area
    
    Raises:
        ValueError: If fence_length is not positive
    """
    if fence_length <= 0:
        raise ValueError("Fence length must be positive")
    
    # Optimal width is fence_length / 4
    width = fence_length / 4
    
    # Length is what remains after using fence for two widths
    length = fence_length - 2 * width
    
    # Calculate maximum area
    area = width * length
    
    return width, length, area


def visualize_area_vs_width(fence_length=100):
    """
    Create a visualization showing how area changes with width.
    """
    # Generate width values from 0 to fence_length/2
    # (can't be more than half since we need 2w + l = fence_length with l > 0)
    widths = np.linspace(0, fence_length/2, 100)
    
    # Calculate corresponding areas
    areas = widths * (fence_length - 2 * widths)
    
    # Find optimal width
    optimal_width = fence_length / 4
    optimal_area = optimal_width * (fence_length - 2 * optimal_width)
    
    # Create the plot
    plt.figure(figsize=(10, 6))
    plt.plot(widths, areas, 'b-', linewidth=2, label='Area function')
    plt.plot(optimal_width, optimal_area, 'ro', markersize=10, 
             label=f'Maximum at w={optimal_width:.1f}, A={optimal_area:.1f}')
    
    plt.xlabel('Width (meters)', fontsize=12)
    plt.ylabel('Area (square meters)', fontsize=12)
    plt.title(f'Area vs Width for Fence Length = {fence_length}m', fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=10)
    
    # Add annotation
    plt.annotate(f'Max Area = {optimal_area:.0f} m²\nWidth = {optimal_width:.0f} m\nLength = {fence_length - 2*optimal_width:.0f} m',
                 xy=(optimal_width, optimal_area),
                 xytext=(optimal_width + 5, optimal_area - 100),
                 arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.2'),
                 fontsize=10,
                 bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))
    
    plt.tight_layout()
    plt.show()


# Test the function
if __name__ == "__main__":
    # Example case
    width, length, area = maximize_enclosure(100)
    print(f"Optimal dimensions for 100m of fencing:")
    print(f"Width: {width} meters")
    print(f"Length: {length} meters")
    print(f"Maximum area: {area} square meters")
    
    # Test other cases
    print("\nOther test cases:")
    for fence in [50, 200, 75]:
        w, l, a = maximize_enclosure(fence)
        print(f"Fence={fence}m: width={w:.1f}m, length={l:.1f}m, area={a:.1f}m²")
    
    # Test error handling
    try:
        maximize_enclosure(-10)
    except ValueError as e:
        print(f"\nError handling works: {e}")
    
    # Create visualization
    visualize_area_vs_width(100)
```

### Summary

The optimal solution for 100 meters of fencing is:
- **Width**: 25 meters (perpendicular to wall)
- **Length**: 50 meters (parallel to wall)
- **Maximum Area**: 1250 square meters

This follows the general rule that for this type of problem, the optimal width is always `fence_length / 4`.