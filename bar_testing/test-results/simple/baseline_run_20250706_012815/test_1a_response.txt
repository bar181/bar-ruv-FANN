```python
from typing import List, Optional

def merge_sorted_lists(list1: Optional[List[int]], list2: Optional[List[int]]) -> List[int]:
    """
    Merge two sorted lists of integers into a single sorted list.
    
    Args:
        list1: First sorted list of integers (can be None or empty)
        list2: Second sorted list of integers (can be None or empty)
    
    Returns:
        A new sorted list containing all elements from both input lists
    
    Examples:
        >>> merge_sorted_lists([1, 3, 5], [2, 4, 6])
        [1, 2, 3, 4, 5, 6]
        >>> merge_sorted_lists([], [1, 2, 3])
        [1, 2, 3]
        >>> merge_sorted_lists([1, 2, 3], None)
        [1, 2, 3]
    """
    # Handle None values
    if list1 is None:
        list1 = []
    if list2 is None:
        list2 = []
    
    # Create a new list to store the result
    result = []
    
    # Use two pointers to traverse both lists
    i, j = 0, 0
    
    # Compare elements and add the smaller one to result
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    
    # Add remaining elements from list1, if any
    while i < len(list1):
        result.append(list1[i])
        i += 1
    
    # Add remaining elements from list2, if any
    while j < len(list2):
        result.append(list2[j])
        j += 1
    
    return result


# Unit tests
def test_merge_sorted_lists():
    """Unit tests for merge_sorted_lists function."""
    
    # Test 1: Normal case with two sorted lists
    assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
    print("Test 1 passed: Normal case")
    
    # Test 2: Empty lists
    assert merge_sorted_lists([], []) == []
    assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]
    assert merge_sorted_lists([], [4, 5, 6]) == [4, 5, 6]
    print("Test 2 passed: Empty lists")
    
    # Test 3: None values
    assert merge_sorted_lists(None, [1, 2, 3]) == [1, 2, 3]
    assert merge_sorted_lists([1, 2, 3], None) == [1, 2, 3]
    assert merge_sorted_lists(None, None) == []
    print("Test 3 passed: None values")
    
    # Test 4: Lists with duplicate values
    assert merge_sorted_lists([1, 2, 2, 3], [2, 3, 4]) == [1, 2, 2, 2, 3, 3, 4]
    print("Test 4 passed: Duplicate values")
    
    # Test 5: Lists with negative numbers
    assert merge_sorted_lists([-5, -2, 0, 3], [-3, -1, 1, 4]) == [-5, -3, -2, -1, 0, 1, 3, 4]
    print("Test 5 passed: Negative numbers")
    
    print("\nAll tests passed!")


if __name__ == "__main__":
    # Example usage
    print("Example:")
    result = merge_sorted_lists([1, 3, 5], [2, 4, 6])
    print(f"merge_sorted_lists([1, 3, 5], [2, 4, 6]) = {result}")
    
    # Run unit tests
    print("\nRunning unit tests...")
    test_merge_sorted_lists()
```