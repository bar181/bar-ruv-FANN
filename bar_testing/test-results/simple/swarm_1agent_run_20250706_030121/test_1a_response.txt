Test 1a: Merge Sorted Lists - Solo Developer Agent Implementation

**Implementation:**

```python
from typing import List, Optional, Union

def merge_sorted_lists(list1: Optional[List[int]], list2: Optional[List[int]]) -> List[int]:
    """
    Merge two sorted lists of integers into a single sorted list.
    
    Args:
        list1: First sorted list of integers (can be None)
        list2: Second sorted list of integers (can be None)
    
    Returns:
        A new sorted list containing all elements from both input lists
    
    Raises:
        TypeError: If input lists contain non-integer values
        
    Examples:
        >>> merge_sorted_lists([1, 3, 5], [2, 4, 6])
        [1, 2, 3, 4, 5, 6]
        >>> merge_sorted_lists([], [1, 2, 3])
        [1, 2, 3]
        >>> merge_sorted_lists(None, [1, 2])
        [1, 2]
    """
    # Handle None inputs
    if list1 is None and list2 is None:
        return []
    if list1 is None:
        return list2.copy() if list2 else []
    if list2 is None:
        return list1.copy() if list1 else []
    
    # Handle empty lists
    if not list1 and not list2:
        return []
    if not list1:
        return list2.copy()
    if not list2:
        return list1.copy()
    
    # Validate that all elements are integers
    for lst, name in [(list1, "list1"), (list2, "list2")]:
        if not all(isinstance(x, int) for x in lst):
            raise TypeError(f"{name} must contain only integers")
    
    # Merge algorithm using two pointers
    result = []
    i, j = 0, 0
    
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    
    # Add remaining elements
    result.extend(list1[i:])
    result.extend(list2[j:])
    
    return result


# Unit Tests
import unittest

class TestMergeSortedLists(unittest.TestCase):
    
    def test_basic_merge(self):
        """Test basic merging of two sorted lists"""
        result = merge_sorted_lists([1, 3, 5], [2, 4, 6])
        self.assertEqual(result, [1, 2, 3, 4, 5, 6])
    
    def test_empty_lists(self):
        """Test handling of empty lists"""
        self.assertEqual(merge_sorted_lists([], []), [])
        self.assertEqual(merge_sorted_lists([], [1, 2, 3]), [1, 2, 3])
        self.assertEqual(merge_sorted_lists([1, 2, 3], []), [1, 2, 3])
    
    def test_none_inputs(self):
        """Test handling of None inputs"""
        self.assertEqual(merge_sorted_lists(None, None), [])
        self.assertEqual(merge_sorted_lists(None, [1, 2]), [1, 2])
        self.assertEqual(merge_sorted_lists([1, 2], None), [1, 2])
    
    def test_duplicate_values(self):
        """Test merging with duplicate values"""
        result = merge_sorted_lists([1, 2, 2, 3], [2, 3, 4])
        self.assertEqual(result, [1, 2, 2, 2, 3, 3, 4])
    
    def test_single_element_lists(self):
        """Test merging single element lists"""
        result = merge_sorted_lists([5], [3])
        self.assertEqual(result, [3, 5])
        
        result = merge_sorted_lists([1], [2])
        self.assertEqual(result, [1, 2])
    
    def test_type_validation(self):
        """Test that non-integer values raise TypeError"""
        with self.assertRaises(TypeError):
            merge_sorted_lists([1, 2, "3"], [4, 5])
        
        with self.assertRaises(TypeError):
            merge_sorted_lists([1, 2], [3, 4.5])

if __name__ == "__main__":
    # Run tests
    unittest.main(verbosity=2)
    
    # Example usage
    print("\nExample usage:")
    print(f"merge_sorted_lists([1, 3, 5], [2, 4, 6]) = {merge_sorted_lists([1, 3, 5], [2, 4, 6])}")
    print(f"merge_sorted_lists([], [1, 2, 3]) = {merge_sorted_lists([], [1, 2, 3])}")
    print(f"merge_sorted_lists(None, [1, 2]) = {merge_sorted_lists(None, [1, 2])}")
```

**Key Features Implemented:**

1. **Type Hints**: Full type annotations using `typing` module
2. **Docstring**: Comprehensive docstring with Args, Returns, Raises, and Examples
3. **Edge Case Handling**: 
   - None inputs (both and individual)
   - Empty lists (both and individual)
   - Type validation with proper error messages
4. **Efficient Algorithm**: Two-pointer merge approach with O(n+m) time complexity
5. **Comprehensive Tests**: 6 test cases covering:
   - Basic functionality
   - Empty lists
   - None inputs
   - Duplicate values
   - Single element lists
   - Type validation

**Algorithm Explanation:**
The implementation uses a classic two-pointer merge algorithm that maintains the sorted order by comparing elements from both lists and selecting the smaller one at each step. This ensures optimal O(n+m) time complexity where n and m are the lengths of the input lists.

**Edge Cases Handled:**
- None values are converted to empty lists
- Empty lists are handled gracefully
- Type validation prevents runtime errors
- Duplicate values are preserved in correct order
- Original lists are not modified (defensive copying)

**Agent Coordination:**
This implementation was created using swarm coordination patterns with the solo-developer agent, ensuring code quality and comprehensive testing coverage.